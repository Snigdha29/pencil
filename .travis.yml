# Shippable CI (MIT License) configuration file for the Underscores WordPress theme.
# @link https://app.shippable.com/

# For use with the Fattheme's WordPress themes.
# @link 

#shippable/docker image cache enabled
#cache: true

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

build_image: limestreet/wp-tests:0.1

# Declare versions of PHP to use. Use one decimal max.
php:
  # aliased to a recent 5.5.x version
  #- "7.1"
  # aliased to a recent 5.5.x version
  - "7.0"
  # aliased to a recent 5.5.x version
  #- "5.6"
  # aliased to a recent 5.5.x version
  #- "5.5"
  # aliased to a recent 5.4.x version
  #- "5.4"
  # aliased to a recent 5.3.x version
  #- "5.3"
  # Current $required_php_version for WordPress: 5.2.4 - not supported out of the box on Shippable
  #- "5.2"

# Declare which versions of WordPress to test against.
# Also declare whether or not to test in Multisite.
env:
  #- BASE_BRANCH=beta
  # Trunk
  # @link https://github.com/WordPress/WordPress
  - WP_VERSION=master WP_MULTISITE=0
  - WP_VERSION=master WP_MULTISITE=1
  # WordPress 4.4
  # @link https://github.com/WordPress/WordPress/tree/4.4-branch
  #- WP_VERSION=4.4 WP_MULTISITE=0
  #- WP_VERSION=4.4 WP_MULTISITE=1
  # WordPress 4.1
  # @link https://github.com/WordPress/WordPress/tree/4.1-branch
  #- WP_VERSION=4.1 WP_MULTISITE=0
  #- WP_VERSION=4.1 WP_MULTISITE=1

# Declare 5.6 beta in test matrix.
# @link https://buddypress.trac.wordpress.org/ticket/5620
# @link http://docs.travis-ci.com/user/build-configuration/
#matrix:
  #include:
    #- php: 5.2
    #- php: 5.3
    #- php: 5.4
    #- php: 5.5
    #- php: 5.6
    #- php: 7.0
    #- php: 7.1
      #env: WP_VERSION=master
      #env: WP_VERSION=4.4
  #allow_failures:
    #- php: 7.1
  #fast_finish: true

#branches:
  #only:
    #- beta

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
before_install:
  #install phpbrew
  #- sudo apt-get update
  #- sudo apt-get build-dep php5
  #- sudo apt-get install -y php5 php5-dev php-pear autoconf automake curl libcurl3-openssl-dev build-essential libxslt1-dev re2c libxml2 libxml2-dev php5-cli bison libbz2-dev libreadline-dev
  #- sudo apt-get install -y libfreetype6 libfreetype6-dev libpng12-0 libpng12-dev libjpeg-dev libjpeg8-dev libjpeg8  libgd-dev libgd3 libxpm4 libltdl7 libltdl-dev
  #- sudo apt-get install -y libssl-dev openssl
  #- sudo apt-get install -y gettext libgettextpo-dev libgettextpo0
  #- sudo apt-get install -y libicu-dev
  #- sudo apt-get install -y libmhash-dev libmhash2
  #- sudo apt-get install -y libmcrypt-dev libmcrypt4
  #- curl -L -O https://github.com/phpbrew/phpbrew/raw/master/phpbrew
  #- chmod +x phpbrew
  #- sudo mv phpbrew /usr/bin/phpbrew
  #- phpbrew init
  #- source ~/.phpbrew/bashrc
  #- phpbrew known
  #- phpbrew update
  #- phpbrew known --old
  #- phpbrew install http://museum.php.net/php5/php-5.2.4.tar.bz2
  #- phpbrew install 5.3
  #- phpbrew install 5.4
  #- phpbrew install 5.5
  #- phpbrew install 5.6
  #- phpbrew install 7.0
  #- phpbrew install 7.1
  
#addons:
  #hosts:
    #- wp.dev

  #firefox: "27.0"

#services:
  #- selenium

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
  #- mkdir -p shippable/codecoverage
  #- mkdir -p shippable/testresults
  # Prepare for using Selenium
  #- "export DISPLAY=:99.0"
  #- "/etc/init.d/xvfb start"
  # Set up WordPress installation.
  - export WP_DEVELOP_DIR=/tmp/wordpress/
  - mkdir -p $WP_DEVELOP_DIR
  #install nginx
  #- sudo apt-get update
  #- sudo apt-get install mysql
  #- sudo apt-get install nginx
  #- sudo cp ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf.default ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf
  #- ~/.phpenv/versions/$(phpenv version-name)/sbin/php-fpm
  #- touch site-nginx.conf
  #- echo "server {
  #  server_name wp_dev;
  #  listen 8080;
  #  root $WP_DEVELOP_DIR;
  #  }" > site-nginx.conf
  #- sudo cp -f site-nginx.conf /etc/nginx/sites-enabled/site-nginx.conf
  #- rm -f site-nginx.conf
  #- sudo sed -e "s?%$WP_DEVELOP_DIR%?$(pwd)?g" --in-place /etc/nginx/sites-enabled/site-nginx.conf
  #- sudo service nginx start
  # Use the Git mirror of WordPress.
  - git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
  # Set up theme information.
  - theme_slug=$(basename $(pwd))
  - theme_dir=$WP_DEVELOP_DIR/src/wp-content/themes/$theme_slug
  - cd ..
  - mv $theme_slug $theme_dir
  # Set up WordPress configuration.
  - cd $WP_DEVELOP_DIR
  - echo $WP_DEVELOP_DIR
  - cp wp-tests-config-sample.php wp-tests-config.php
  - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
  - sed -i "s/yourusernamehere/root/" wp-tests-config.php
  - sed -i "s/yourpasswordhere//" wp-tests-config.php
  # Create WordPress database.
  - mysql -e 'CREATE DATABASE wordpress_test;' -uroot
  #Install WP-CLI
  #- curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
  #- php wp-cli.phar --info
  #- chmod +x wp-cli.phar
  #- sudo mv wp-cli.phar /usr/local/bin/wp
  #- wp --info
  #create config file
  #- wp core config --dbname=wordpress_test --dbuser=root
  #install wp
  #- wp core install --url=wp.dev --title="Local WordPress Dev" --admin_name=admin --admin_email="admin@local.dev" --admin_password="password"
  #Install and activate vip-scanner plugin
  #- git clone --recursive  https://github.com/Automattic/vip-scanner.git $WP_DEVELOP_DIR/src/wp-content/plugins/vip-scanner
  #- wp plugin activate vip-scanner
  # Install CodeSniffer for WordPress Coding Standards checks.
  - git clone https://github.com/squizlabs/PHP_CodeSniffer.git php-codesniffer
  # Install WordPress Coding Standards.
  - git clone https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git wordpress-coding-standards
  # Hop into CodeSniffer directory.
  - cd php-codesniffer
  # Set install path for WordPress Coding Standards.
  # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
  - scripts/phpcs --config-set installed_paths ../wordpress-coding-standards
  #- scripts/phpcs --config-set installed_paths ../wordpress-coding-standards/WordPress
  # Hop into themes directory.
  - cd $theme_dir
  # run npm install
  #- npm install
  - npm install
  # Run some grunt build tasks
  #- grunt
  # After CodeSniffer install you should refresh your path.
  - phpenv rehash
  # check which php version is used

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  # Check with vip-scanner (only informational)
  #- wp vip-scanner scan-theme --theme=$theme_slug --scan_type="Undefined Function Check"
  # Search for PHP syntax errors.
  #- phpbrew use 5.3
  #- php -v
  - find . \( -name '*.php' -not -path "*node_modules*" -not -path "*vendor*" \) -print0 | xargs -0 -n1 php -lf
  #- phpbrew use php-7.0
  #- php -v
  #- find . \( -name '*.php' -not -path "*node_modules*" -not -path "*vendor*" \) -print0 | xargs -0 -n1 php -lf
  #- phpbrew use 7.1
  #- php -v
  #- find . \( -name '*.php' -not -path "*node_modules*" -not -path "*vendor*" \) -print0 | xargs -0 -n1 php -lf
  #- phpbrew off
  #- php -v
  # Checking withe jshint
  - grunt jshint
  # WordPress Coding Standards
  # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
  # @link http://pear.php.net/package/PHP_CodeSniffer/
  # -p flag: Show progress of the run.
  # -s flag: Show sniff codes in all reports.
  # -v flag: Print verbose output.
  # -n flag: Do not print warnings. (shortcut for --warning-severity=0)
  # --standard: Use WordPress as the standard.
  # --extensions: Only sniff PHP files.
  - $WP_DEVELOP_DIR/php-codesniffer/scripts/phpcs -p -s -v -n . --standard=./codesniffer.ruleset.xml --extensions=php --ignore=*/node_modules/*,*/vendor/*,class-tgm-plugin-activation.php,class-media-grabber.php

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
  email: false
