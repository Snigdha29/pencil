{
  "name": "pa11y",
  "version": "3.3.0",
  "description": "pa11y is your automated accessibility testing pal",
  "keywords": [
    "accessibility",
    "analysis",
    "cli",
    "report"
  ],
  "author": {
    "name": "Nature Publishing Group"
  },
  "contributors": [
    {
      "name": "Rowan Manning",
      "url": "http://rowanmanning.com/"
    },
    {
      "name": "Whymarrh Whitby",
      "url": "http://whymarrh.com/"
    },
    {
      "name": "Stephen Mathieson",
      "url": "http://www.stephenmathieson.com/"
    },
    {
      "name": "Alex Soble",
      "url": "http://www.alexsoble.com/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/nature/pa11y.git"
  },
  "homepage": "https://github.com/nature/pa11y",
  "bugs": {
    "url": "https://github.com/nature/pa11y/issues"
  },
  "license": "GPL-3.0",
  "engines": {
    "node": ">=0.12"
  },
  "dependencies": {
    "async": "~1.4",
    "bfj": "~1.2",
    "chalk": "~1.1",
    "commander": "~2.8",
    "lower-case": "~1.1",
    "node.extend": "~1.1",
    "once": "~1.3",
    "truffler": "~2.1"
  },
  "devDependencies": {
    "istanbul": "~0.3",
    "jscs": "^2",
    "jshint": "^2",
    "mocha": "^2",
    "mockery": "~1.4",
    "proclaim": "^3",
    "sinon": "^1"
  },
  "main": "./lib/pa11y.js",
  "bin": {
    "pa11y": "./bin/pa11y"
  },
  "scripts": {
    "test": "make ci"
  },
  "readme": "\npa11y\n=====\n\npa11y is your automated accessibility testing pal. It runs [HTML CodeSniffer][sniff] from the command line for programmatic accessibility reporting.\n\n[![NPM version][shield-npm]][info-npm]\n[![Node.js version support][shield-node]][info-node]\n[![Build status][shield-build]][info-build]\n[![Code coverage][shield-coverage]][info-coverage]\n[![Dependencies][shield-dependencies]][info-dependencies]\n[![GPLv3 licensed][shield-license]][info-license]\n\nOn the command line:\n\n```sh\npa11y nature.com\n```\n\nIn JavaScript:\n\n```js\nvar pa11y = require('pa11y');\n\nvar test = pa11y(options);\n\ntest.run('nature.com', function (error, results) {\n    /* ... */\n});\n```\n\n\nTable Of Contents\n-----------------\n\n- [Requirements](#requirements)\n- [Command-Line Interface](#command-line-interface)\n- [JavaScript Interface](#javascript-interface)\n- [Configuration](#configuration)\n- [Examples](#examples)\n- [Common Questions](#common-questions)\n- [Contributing](#contributing)\n- [Migrating](#migrating)\n- [License](#license)\n\n\nRequirements\n------------\n\npa11y requires [Node.js][node] 0.12+ and [PhantomJS][phantom] to run.\n\nOn a Mac, you can install these with [Homebrew][brew]:\n\n```sh\n$ brew install node\n$ brew install phantomjs\n```\n\nIf you're on Linux, you'll probably be able to work it out.\n\nWindows users approach with caution â€“ we've been able to get pa11y running (Windows 7, Node 0.12) but only after installing Visual Studio and the Windows SDK (as well as Git, Python and PhantomJS). The [Windows installation instructions for node-gyp][windows-install] are a good place to start.\n\n\nCommand-Line Interface\n----------------------\n\nInstall pa11y globally with [npm][npm]:\n\n```\nnpm install -g pa11y\n```\n\nThis installs the `pa11y` command-line tool:\n\n```\nUsage: pa11y [options] <url>\n\n  Options:\n\n    -h, --help                 output usage information\n    -V, --version              output the version number\n    -s, --standard <name>      the accessibility standard to use: Section508, WCAG2A, WCAG2AA (default), WCAG2AAA\n    -r, --reporter <reporter>  the reporter to use: cli (default), csv, html, json\n    -l, --level <level>        the level of message to fail on (exit with code 2): error, warning, notice\n    -T, --threshold <name>     the number of individual errors, warnings, or notices to permit before failing\n    -i, --ignore <ignore>      types and codes of messages to ignore, a repeatable value or separated by semi-colons\n    -c, --config <path>        a JSON config file\n    -p, --port <port>          the port to run PhantomJS on\n    -t, --timeout <ms>         the timeout in milliseconds\n    -w, --wait <ms>            the time to wait before running tests in milliseconds\n    -d, --debug                output debug messages\n    -H, --htmlcs <url/path>    the URL or path to source HTML_CodeSniffer from\n    -e, --phantomjs <path>     the path to the phantomjs executable\n```\n\n### Running Tests\n\nRun an accessibility test against a URL:\n\n```\npa11y nature.com\n```\n\nRun a test with CSV reporting and save to a file:\n\n```\npa11y --reporter csv nature.com > report.csv\n```\n\nRun pa11y with the Section508 ruleset:\n\n```\npa11y --standard Section508 nature.com\n```\n\n### Exit Codes\n\nThe command-line tool uses the following exit codes:\n\n  - `0`: pa11y ran successfully, and there are no errors\n  - `1`: pa11y failed run due to a technical fault\n  - `2`: pa11y ran successfully but there are errors in the page\n\nBy default, only accessibility issues with a type of `error` will exit with a code of `2`. This is configurable with the `--level` flag which can be set to one of the following:\n\n  - `error`: exit with a code of `2` on errors only, exit with a code of `0` on warnings and notices\n  - `warning`: exit with a code of `2` on errors and warnings, exit with a code of `0` on notices\n  - `notice`: exit with a code of `2` on errors, warnings, and notices\n  - `none`: always exit with a code of `0`\n\n### Command-Line Configuration\n\nThe command-line tool can be configured with a JSON file as well as arguments. By default it will look for a `pa11y.json` file in the current directory, but you can change this with the `--config` flag:\n\n```\npa11y --config ./path/to/config.json nature.com\n```\n\nFor more information on configuring pa11y, see the [configuration documentation](#configuration).\n\n### Ignoring\n\nThe ignore flag can be used in several different ways. Seperated by semi-colons:\n\n```\npa11y --ignore \"warning;notice\" nature.com\n```\n\nor by using the flag mutiple times:\n\n```\npa11y --ignore warning --ignore notice nature.com\n```\n\n### Reporters\n\nThe command-line tool can report test results in a few different ways using the `--reporter` flag. The built-in reporters are:\n\n  - `cli`: output test results in a human-readable format\n  - `csv`: output test results as comma-separated values\n  - `html`: output test results as an HTML document\n  - `json`: output test results as a JSON array\n  - `markdown`: output test results as a Markdown document\n\nYou can also write and publish your own reporters. Pa11y looks for reporters in the core library, your `node_modules` folder (with a naming pattern), and the current working directory. The first reporter found will be loaded. So with this command:\n\n```\npa11y --reporter rainbows nature.com\n```\n\nThe following locations will be checked:\n\n```\n<pa11y-core>/reporter/rainbows\n<cwd>/node_modules/pa11y-reporter-rainbows\n<cwd>/rainbows\n```\n\nA pa11y reporter should export the following methods:\n\n```js\nbegin(url); // Called when pa11y starts\nerror(message); // Called when a technical error is reported\ndebug(message); // Called when a debug message is reported\ninfo(message); // Called when an information message is reported\nresults(resultsArray, url); // Called with the results of a test run\n```\n\nYou may find the following reporters useful:\n\n  - [`1.0-json`][1.0-json-reporter]: output test results in the pa11y 1.0 JSON format\n\n\nJavaScript Interface\n--------------------\n\nInstall pa11y with [npm][npm] or add to your `package.json`:\n\n```\nnpm install pa11y\n```\n\nRequire pa11y:\n\n```js\nvar pa11y = require('pa11y');\n```\n\nCreate a tester by initialising pa11y with [some options](#configuration):\n\n```js\nvar test = pa11y(options);\n```\n\nThe `test.run` function can then be used to run your test function against a URL:\n\n```js\ntest.run('http://www.nature.com/', function(error, results) {\n    // ...\n});\n```\n\nThe results that get passed into your test callback come from HTML CodeSniffer, and look like this:\n\n```js\n[\n    {\n        code: 'WCAG2AA.Principle1.Guideline1_1.1_1_1.H30.2',\n        context: '<a href=\"http://example.com/\"><img src=\"example.jpg\" alt=\"\"/></a>',\n        message: 'Img element is the only content of the link, but is missing alt text. The alt text should describe the purpose of the link.',\n        selector: 'html > body > p:nth-child(1) > a',\n        type: 'error',\n        typeCode: 1\n    },\n    {\n        code: 'WCAG2AA.Principle1.Guideline1_3.1_3_1.H49.B',\n        context: '<b>Hello World!</b>',\n        message: 'Semantic markup should be used to mark emphasised or special text so that it can be programmatically determined.',\n        selector: '#content > b:nth-child(4)',\n        type: 'warning',\n        typeCode: 2\n    },\n    {\n        code: 'WCAG2AA.Principle2.Guideline2_4.2_4_4.H77,H78,H79,H80,H81',\n        context: '<a href=\"http://example.com/\">Hello World!</a>',\n        message: 'Check that the link text combined with programmatically determined link context identifies the purpose of the link.',\n        selector: 'html > body > ul > li:nth-child(2) > a',\n        type: 'notice',\n        typeCode: 3\n    }\n]\n```\n\n\nConfiguration\n-------------\n\npa11y has lots of options you can use to change the way PhantomJS runs, or the way your page is loaded. Options can be set either on the pa11y instance when it's created or the individual test runs. This allows you to set some defaults which can be overridden per-test:\n\n```js\n// Set the default Foo header to \"bar\"\nvar test = pa11y({\n    page: {\n        headers: {\n            Foo: 'bar'\n        }\n    }\n});\n\n// Run a test with the Foo header set to \"bar\"\ntest.run('http://www.nature.com/', function(error, results) { /* ... */ });\n\n// Run a test with the Foo header overridden\ntest.run('http://www.nature.com/', {\n    page: {\n        headers: {\n            Foo: 'hello'\n        }\n    }\n}, function(error, results) { /* ... */ });\n```\n\nBelow is a reference of all the options that are available:\n\n### `htmlcs` (string)\n\nThe path or URL to source HTML CodeSniffer from.\n\n```js\npa11y({\n    htmlcs: 'http://squizlabs.github.io/HTML_CodeSniffer/build/HTMLCS.js'\n});\n```\n\nDefaults to a local copy of HTML CodeSniffer, found in [lib/vendor/HTMLCS.js](lib/vendor/HTMLCS.js).\n\n### `ignore` (array)\n\nAn array of result codes and types that you'd like to ignore. You can find the codes for each rule in the console output and the types are `error`, `warning`, and `notice`.\n\n```js\npa11y({\n    ignore: [\n        'notice',\n        'WCAG2AA.Principle3.Guideline3_1.3_1_1.H57.2'\n    ]\n});\n```\n\nDefaults to an empty array.\n\n### `log` (object)\n\nAn object which implements the methods `debug`, `error`, and `info` which will be used to report errors and test information.\n\n```js\npa11y({\n    log: {\n        debug: console.log.bind(console),\n        error: console.error.bind(console),\n        info: console.info.bind(console)\n    }\n});\n```\n\nEach of these defaults to an empty function.\n\n### `page.headers` (object)\n\nA key-value map of request headers to send when testing a web page.\n\n```js\npa11y({\n    page: {\n        headers: {\n            Cookie: 'foo=bar'\n        }\n    }\n});\n```\n\nDefaults to an empty object.\n\n### `page.settings` (object)\n\nA key-value map of settings to add to the PhantomJS page. For a full list of available settings, see the [PhantomJS page settings documentation][phantom-page-settings].\n\n```js\npa11y({\n    page: {\n        settings: {\n            loadImages: false,\n            userName: 'nature',\n            password: 'say the magic word'\n        }\n    }\n});\n```\n\nDefaults to:\n\n```js\n{\n    userAgent: 'pa11y/<version> (truffler/<version>)'\n}\n```\n\n### `page.viewport` (object)\n\nThe viewport width and height in pixels. The `viewport` object must have both `width` and `height` properties.\n\n```js\npa11y({\n    page: {\n        viewport: {\n            width: 320,\n            height: 480\n        }\n    }\n});\n```\n\nDefaults to:\n\n```js\n{\n    width: 1024,\n    height: 768\n}\n```\n\n### `phantom` (object)\n\nA key-value map of settings to initialise PhantomJS with. This is passed directly into the `phantom` module â€“ [documentation can be found here][phantom-node-options]. You can pass PhantomJS command-line parameters in the `phantom.parameters` option as key-value pairs.\n\n```js\npa11y({\n    phantom: {\n        port: 1234,\n        parameters: {\n            'ignore-ssl-errors': 'false',\n            'ssl-protocol': 'tlsv1'\n        }\n    }\n});\n```\n\nDefaults to:\n\n```js\n{\n    parameters: {\n        'ignore-ssl-errors': 'true'\n    }\n}\n```\n\nIf `phantom.port` is not specified, a random available port will be used.\n\n### `standard` (string)\n\nThe accessibility standard to use when testing pages. This should be one of `Section508`, `WCAG2A`, `WCAG2AA`, or `WCAG2AAA`.\n\n```js\npa11y({\n    standard: 'Section508'\n});\n```\n\nDefaults to `WCAG2AA`.\n\n### `timeout` (number)\n\nThe time in milliseconds that a test should be allowed to run before calling back with a timeout error.\n\n```js\npa11y({\n    timeout: 500\n});\n```\n\nDefaults to `30000`.\n\n### `wait` (number)\n\nThe time in milliseconds to wait before running HTML CodeSniffer on the page.\n\n```js\npa11y({\n    wait: 500\n});\n```\n\nDefaults to `0`.\n\n\nExamples\n--------\n\n### Basic Example\n\nRun pa11y on a URL and output the results:\n\n```\nnode example/basic\n```\n\n### Multiple Example\n\nUse [async][async] to run pa11y on multiple URLs in series, and output the results:\n\n```\nnode example/multiple\n```\n\n\nCommon Questions\n----------------\n\nCommon questions about pa11y are answered here.\n\n### How do I set cookies on a tested page?\n\nUse the `page.headers` option either in your JS code or in your JSON config file:\n\n```js\npa11y({\n    page: {\n        headers: {\n            Cookie: 'foo=bar'\n        }\n    }\n});\n```\n\n### How can pa11y log in if my site's behind basic auth?\n\nUse the `page.settings` option either in your JS code or in your JSON config file to set a username and password:\n\n```js\npa11y({\n    page: {\n        settings: {\n            userName: 'nature',\n            password: 'say the magic word'\n        }\n    }\n});\n```\n\n### How can I use pa11y with a proxy server?\n\nUse the `phantom.parameters` option either in your JS code or in your JSON config file:\n\n```js\npa11y({\n    phantom: {\n        parameters: {\n            'proxy': '1.2.3.4:8080',\n            'proxy-type': 'http',\n            'proxy-auth': 'username:password'\n        }\n    }\n});\n```\n\nThese match PhantomJS [command-line parameters][phantom-cli]. `proxy-type` can be set to `http`, `socks5`, or `none`.\n\n\nContributing\n------------\n\nTo contribute to pa11y, clone this repo locally and commit your code on a separate branch.\n\nPlease write unit tests for your code, and check that everything works by running the following before opening a pull-request:\n\n```sh\nmake ci\n```\n\n\nMigrating\n---------\n\nIf you're using pa11y 1.0 or 2.0 and wish to migrate to 3.0, we've written a [Migration Guide](MIGRATION.md) to help with that.\n\nIt's recommended that you migrate to 3.0 as soon as possible, but we maintain branches for previous major versions. Each of these will be supported (critical bug fixes only) for 1 year from the next major version's released date:\n\n- [pa11y 2.0][2.x] (support ends 16th October 2016)\n- [pa11y 1.0][1.x] (support ends 8th June 2016)\n\nIf you're opening issues related to these, please mention the version being used.\n\n\nLicense\n-------\n\nCopyright 2013 Nature Publishing Group.  \npa11y is licensed under the [GNU General Public License 3.0][info-license].\n\n\n\n[1.0-json-reporter]: https://github.com/nature/pa11y-reporter-1.0-json\n[2.x]: https://github.com/nature/pa11y/tree/2.x\n[1.x]: https://github.com/nature/pa11y/tree/1.x\n[async]: https://github.com/caolan/async\n[brew]: http://mxcl.github.com/homebrew/\n[jscs]: http://jscs.info/\n[node]: http://nodejs.org/\n[npm]: https://www.npmjs.com/\n[phantom]: http://phantomjs.org/\n[phantom-cli]: http://phantomjs.org/api/command-line.html\n[phantom-node-options]: https://github.com/sgentle/phantomjs-node#functionality-details\n[phantom-page-settings]: http://phantomjs.org/api/webpage/property/settings.html\n[sniff]: http://squizlabs.github.com/HTML_CodeSniffer/\n[windows-install]: https://github.com/TooTallNate/node-gyp#installation\n\n[info-coverage]: https://coveralls.io/github/nature/pa11y\n[info-dependencies]: https://gemnasium.com/nature/pa11y\n[info-license]: LICENSE\n[info-node]: package.json\n[info-npm]: https://www.npmjs.com/package/pa11y\n[info-build]: https://travis-ci.org/nature/pa11y\n[shield-dependencies]: https://img.shields.io/gemnasium/nature/pa11y.svg\n[shield-coverage]: https://img.shields.io/coveralls/nature/pa11y.svg\n[shield-license]: https://img.shields.io/badge/license-GPLv3-blue.svg\n[shield-node]: https://img.shields.io/badge/node.js%20support-0.12â€“5-brightgreen.svg\n[shield-npm]: https://img.shields.io/npm/v/pa11y.svg\n[shield-build]: https://img.shields.io/travis/nature/pa11y/master.svg\n",
  "readmeFilename": "README.md",
  "_id": "pa11y@3.3.0",
  "_from": "pa11y@"
}
