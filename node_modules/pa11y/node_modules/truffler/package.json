{
  "name": "truffler",
  "version": "2.1.0",
  "description": "Access web pages programmatically with PhantomJS, for running tests or scraping information",
  "keywords": [
    "dom",
    "html",
    "phantomjs",
    "test"
  ],
  "author": {
    "name": "Nature Publishing Group"
  },
  "contributors": [
    {
      "name": "Rowan Manning",
      "url": "http://rowanmanning.com/"
    },
    {
      "name": "Whymarrh Whitby",
      "url": "http://whymarrh.com/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/nature/truffler.git"
  },
  "homepage": "https://github.com/nature/truffler",
  "bugs": {
    "url": "https://github.com/nature/truffler/issues"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.12"
  },
  "dependencies": {
    "async": "~1.4",
    "freeport": "~1.0",
    "hasbin": "~1.1",
    "node.extend": "~1.1",
    "node-phantom-simple": "~2.0"
  },
  "devDependencies": {
    "istanbul": "~0.4",
    "jscs": "^2",
    "jshint": "^2",
    "mocha": "^2",
    "mockery": "~1.4",
    "proclaim": "^3",
    "sinon": "^1"
  },
  "main": "./lib/truffler.js",
  "scripts": {
    "test": "make ci"
  },
  "readme": "\nTruffler\n========\n\nAccess web pages programmatically with [PhantomJS][phantom], for running tests or scraping information.\n\n[![NPM version][shield-npm]][info-npm]\n[![Node.js version support][shield-node]][info-node]\n[![Build status][shield-build]][info-build]\n[![Dependencies][shield-dependencies]][info-dependencies]\n[![MIT licensed][shield-license]][info-license]\n\n```js\nvar truffler = require('truffler');\n\nvar test = truffler(function(browser, page, done) {\n    // the test function to run in PhantomJS\n    done();\n});\n\ntest.run('http://www.nature.com/', function(error, results) {\n    console.log(results);\n});\n```\n\n\nTable Of Contents\n-----------------\n\n- [Install](#install)\n- [Usage](#usage)\n- [Options](#options)\n- [Examples](#examples)\n- [Contributing](#contributing)\n- [Migrating](#migrating)\n- [License](#license)\n\n\nInstall\n-------\n\nInstall Truffler with [npm][npm]:\n\n```sh\nnpm install truffler\n```\n\n\nUsage\n-----\n\nRequire in Truffler:\n\n```js\nvar truffler = require('truffler');\n```\n\nCreate a test runner by initialising Truffler with a test function. This test function has access to a PhantomJS [browser][phantom-browser] and [page][phantom-page] instance. The test function must accept a third argument which is a callback:\n\n```js\nvar test = truffler(function(browser, page, done) {\n    // ... perform testing here ...\n    done(error, results);\n});\n```\n\nWithin this function, you have access to all of the behaviour in PhantomJS.\n\nYou can also instantiate Truffler with some [default options](#options) if you wish. This allows you to change the way PhantomJS and your page is loaded:\n\n```js\nvar test = truffler({\n    // ... options go here ...\n}, function(browser, page, done) {\n    // ... perform testing here ...\n});\n```\n\nThe `test.run` function can then be used to run your test function against a URL:\n\n```js\ntest.run('http://www.nature.com/', function(error, results) {\n    // ...\n});\n```\n\nThe `error` and `results` parameters contain errors and results from the PhantomJS run against your page. The results can be any object you like. Here's an example test function which returns the page title if it has one, or errors if not.\n\n```js\nvar test = truffler(function(browser, page, done) {\n    page.evaluate(\n        function() {\n            return document.title;\n        },\n        function(error, title) {\n            if (!title) {\n                return done(new Error('The page has no title!'));\n            }\n            done(null, title);\n        }\n    );\n});\n\ntest.run('http://www.nature.com/', function(error, title) {\n    // ... do something with the error and title ...\n});\n```\n\n\nOptions\n-------\n\nTruffler has lots of options you can use to change the way PhantomJS runs, or the way your page is loaded. Options can be set either on the Truffler instance when it's created or the individual test runs. This allows you to set some defaults which can be overridden per-test:\n\n```js\n// Set the default Foo header to \"bar\"\nvar test = truffler({\n    page: {\n        headers: {\n            Foo: 'bar'\n        }\n    }\n}, function() { /* ... */ });\n\n// Run a test with the Foo header set to \"bar\"\ntest.run('http://www.nature.com/', function(error, title) { /* ... */});\n\n// Run a test with the Foo header overridden\ntest.run('http://www.nature.com/', {\n    page: {\n        headers: {\n            Foo: 'hello'\n        }\n    }\n}, function(error, title) { /* ... */});\n```\n\nBelow is a reference of all the options that are available:\n\n### `log` (object)\n\nAn object which implments the methods `debug`, `error`, and `info` which will be used to report errors and test information.\n\n```js\ntruffler({\n    log: {\n        debug: console.log.bind(console),\n        error: console.error.bind(console),\n        info: console.info.bind(console)\n    }\n});\n```\n\nEach of these defaults to an empty function.\n\n### `page.headers` (object)\n\nA key-value map of request headers to send when testing a web page.\n\n```js\ntruffler({\n    page: {\n        headers: {\n            Cookie: 'foo=bar'\n        }\n    }\n});\n```\n\nDefaults to an empty object.\n\n### `page.settings` (object)\n\nA key-value map of settings to add to the PhantomJS page. For a full list of available settings, see the [PhantomJS page settings documentation][phantom-page-settings].\n\n```js\ntruffler({\n    page: {\n        settings: {\n            loadImages: false,\n            userName: 'nature',\n            password: 'say the magic word'\n        }\n    }\n});\n```\n\nDefaults to:\n\n```js\n{\n    resourceTimeout: 30000,\n    userAgent: 'truffler/<version>'\n}\n```\n\n### `page.viewport` (object)\n\nThe viewport width and height in pixels. The `viewport` object must have both `width` and `height` properties.\n\n```js\ntruffler({\n    page: {\n        viewport: {\n            width: 320,\n            height: 480\n        }\n    }\n});\n```\n\nDefaults to:\n\n```js\n{\n    width: 1024,\n    height: 768\n}\n```\n\n### `phantom` (object)\n\nA key-value map of settings to initialise PhantomJS with. This is passed directly into the `phantom` module – [documentation can be found here][phantom-node-options]. You can pass PhantomJS command-line parameters in the `phantom.parameters` option as key-value pairs.\n\n```js\ntruffler({\n    phantom: {\n        path: 'PATH_TO_PHANTOMJS_EXE',\n        port: 1234,\n        parameters: {\n            'ignore-ssl-errors': 'true'\n        }\n    }\n});\n```\n\nDefaults to an empty object. If `phantom.port` is not specified, a random available port will be used.\n\n### `timeout` (number)\n\nThe maximum time (in milliseconds) that Truffler should run for. This timeout can sometimes be exceeded, if a long-running task has started within PhantomJS itself. This is rare, but you shouldn't rely on exact timing.\n\nIf the timeout is exceeded, the test function will callback with an error and no results.\n\n```js\ntruffler({\n    timeout: 1000\n});\n```\n\nDefaults to `30000` (30 seconds).\n\n\nExamples\n--------\n\n### Basic Example\n\nRun Truffler on a URL and output the page title:\n\n```\nnode example/basic\n```\n\n### Multiple Example\n\nUse [async][async] to run Truffler on multiple URLs in series, and output the page titles:\n\n```\nnode example/multiple\n```\n\n\nContributing\n------------\n\nTo contribute to Truffler, clone this repo locally and commit your code on a separate branch.\n\nPlease write unit tests for your code, and check that everything works by running the following before opening a pull-request:\n\n```sh\nmake ci\n```\n\n\nMigrating\n---------\n\nIf you're using Truffler 1.0 and wish to migrate to 2.0, we've written a [Migration Guide](MIGRATION.md) to help with that.\n\nIt's recommended that you migrate to 2.0 as soon as possible, but [1.0 is still available on the 1.x branch][1.x]. We'll be providing support for 1.0 for the forseeable future, but there will be no new feature development.\n\n\nLicense\n-------\n\nTruffler is licensed under the [MIT][info-license] license.  \nCopyright &copy; 2015, Nature Publishing Group\n\n\n\n[1.x]: https://github.com/nature/truffler/tree/1.x\n[async]: https://github.com/caolan/async\n[npm]: https://npmjs.org/\n[phantom]: http://phantomjs.org/\n[phantom-browser]: http://phantomjs.org/api/phantom/\n[phantom-node-options]: https://github.com/sgentle/phantomjs-node#functionality-details\n[phantom-page]: http://phantomjs.org/api/webpage/\n[phantom-page-settings]: http://phantomjs.org/api/webpage/property/settings.html\n\n[info-dependencies]: https://gemnasium.com/nature/truffler\n[info-license]: LICENSE\n[info-node]: package.json\n[info-npm]: https://www.npmjs.com/package/truffler\n[info-build]: https://travis-ci.org/nature/truffler\n[shield-dependencies]: https://img.shields.io/gemnasium/nature/truffler.svg\n[shield-license]: https://img.shields.io/badge/license-MIT-blue.svg\n[shield-node]: https://img.shields.io/badge/node.js%20support-0.12–5-brightgreen.svg\n[shield-npm]: https://img.shields.io/npm/v/truffler.svg\n[shield-build]: https://img.shields.io/travis/nature/truffler/master.svg\n",
  "readmeFilename": "README.md",
  "_id": "truffler@2.1.0",
  "_from": "truffler@~2.1"
}
