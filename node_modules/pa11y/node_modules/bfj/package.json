{
  "name": "bfj",
  "version": "1.2.2",
  "description": "Big-friendly JSON. Asynchronous streaming functions for large JSON data sets.",
  "homepage": "https://github.com/philbooth/bfj",
  "bugs": {
    "url": "https://github.com/philbooth/bfj/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Phil Booth",
    "url": "https://github.com/philbooth"
  },
  "main": "./src",
  "keywords": [
    "json",
    "streamify",
    "stringify",
    "walk",
    "parse",
    "parser",
    "serialise",
    "serialize",
    "read",
    "write",
    "async",
    "asynchronous"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/philbooth/bfj.git"
  },
  "dependencies": {
    "check-types": "~3.2"
  },
  "devDependencies": {
    "jshint": "~2.7",
    "mocha": "~2.2",
    "chai": "~2.3",
    "mockery": "~1.4",
    "spooks": "~2.0"
  },
  "scripts": {
    "lint": "jshint src",
    "test": "npm run unit && npm run integration",
    "unit": "mocha --ui tdd --reporter spec --recursive --colors --slow 120 test/unit",
    "integration": "mocha --ui tdd --reporter spec --colors test/integration",
    "perfbig": "wget -O test/mtg.json http://mtgjson.com/json/AllSets-x.json && node test/performance mtg",
    "perfsmall": "wget -O test/wpt.json https://raw.githubusercontent.com/nature/webpagetest-mapper/master/examples/dump.json && node test/performance wpt"
  },
  "contributors": [
    {
      "name": "Phil Booth",
      "email": "pmbooth@gmail.com",
      "url": "https://github.com/philbooth"
    },
    {
      "name": "Rowan Manning",
      "url": "https://github.com/rowanmanning"
    }
  ],
  "readme": "# BFJ\n\n[![Build status][ci-image]][ci-status]\n\nBig-friendly JSON. Asynchronous streaming functions for large JSON data sets.\n\n* [Why would I want those?](#why-would-i-want-those)\n* [What functions does it implement?](#what-functions-does-it-implement)\n* [How do I install it?](#how-do-i-install-it)\n* [How do I use it?](#how-do-i-use-it)\n  * [bfj.walk (stream, options)](#bfjwalk-stream-options)\n    * [Example](#example)\n  * [bfj.parse (stream, options)](#bfjparse-stream-options)\n    * [Example](#example-1)\n  * [bfj.read (path, options)](#bfjread-path-options)\n    * [Example](#example-2)\n  * [bfj.eventify (data, options)](#bfjeventify-data-options)\n    * [Example](#example-3)\n  * [bfj.streamify (data, options)](#bfjstreamify-data-options)\n    * [Example](#example-4)\n  * [bfj.stringify (data, options)](#bfjstringify-data-options)\n    * [Example](#example-5)\n  * [bfj.write (path, data, options)](#bfjwrite-path-data-options)\n    * [Example](#example-6)\n* [Is there a change log?](#is-there-a-change-log)\n* [How do I set up the dev environment?](#how-do-i-set-up-the-dev-environment)\n* [What versions of node.js does it support?](#what-versions-of-nodejs-does-it-support)\n* [What license is it released under?](#what-license-is-it-released-under)\n\n## Why would I want those?\n\nIf you need\nto parse\nlarge JSON strings\nor stringify\nlarge JavaScript data sets,\nit makes sense\nto do so asynchronously\nrather than\nmonopolising\nthe event loop.\nBFJ implements\nthose asynchronous functions.\n\n## What functions does it implement?\n\nSeven functions\nare exported.\n\nThree are\nconcerned with\nparsing, or\nturning JSON strings\ninto JavaScript data:\n\n* `walk`\n  asynchronously walks\n  a stream,\n  emitting events\n  as it encounters\n  JSON tokens.\n  Analagous to a\n  [SAX parser][sax].\n\n* `parse`\n  asynchronously parses\n  a stream of JSON.\n\n* `read`\n  asynchronously parses\n  a JSON file from disk.\n\nThe four remaining functions\nhandle the reverse transformations;\nserialising\nJavaScript data\nto JSON:\n\n* `eventify`\n  asynchronously traverses\n  a data structure\n  depth-first,\n  emitting events\n  as it encounters items.\n  By default\n  it coerces\n  promises, buffers, dates and iterables\n  to JSON-friendly values.\n\n* `streamify`\n  asynchronously serialises data\n  to a stream of JSON.\n\n* `stringify`\n  asynchronously serialises data\n  to a JSON string.\n\n* `write`\n  asynchronously serialises data\n  to a JSON file on disk.\n\n## How do I install it?\n\nIf you're using npm:\n\n```\nnpm install bfj --save\n```\n\nOr if you just want\nthe git repo:\n\n```\ngit clone git@github.com:philbooth/bfj.git\n```\n\n## How do I use it?\n\nImport the library\nusing `require`:\n\n```js\nvar bfj = require('bfj');\n```\n\nSeven functions\nare exported:\n`walk`,\n`parse`,\n`read`,\n`eventify`,\n`streamify`,\n`stringify` and\n`write`.\n\n### bfj.walk (stream, options)\n\n`walk` returns an [event emitter][eventemitter]\nand asynchronously walks\na stream of JSON data,\nemitting events\nas it encounters\ntokens.\n\nIt takes two arguments;\na [readable stream][readable]\nfrom which\nthe JSON\nwill be read\nand an options object\nthat supports\nthe following property.\n\n* `options.discard`:\n  The number of characters\n  to process before\n  discarding them\n  to save memory.\n  The default value\n  is `16384`.\n\nThe emitted events\nare defined\nas public properties\nof an object,\n`bfj.events`:\n\n* `bfj.events.array`\n  indicates that\n  an array context\n  has been entered\n  by encountering\n  the `[` character.\n\n* `bfj.events.endArray`\n  indicates that\n  an array context\n  has been left\n  by encountering\n  the `]` character.\n\n* `bfj.events.object`\n  indicates that\n  an object context\n  has been entered\n  by encountering\n  the `{` character.\n\n* `bfj.events.endObject`\n  indicates that\n  an object context\n  has been left\n  by encountering\n  the `}` character.\n\n* `bfj.events.property`\n  indicates that\n  a property\n  has been encountered\n  in an object.\n  The listener\n  will be passed\n  the name of the property\n  as its argument\n  and the next event\n  to be emitted\n  will represent\n  the property's value.\n\n* `bfj.events.string`\n  indicates that\n  a string\n  has been encountered.\n  The listener\n  will be passed\n  the value\n  as its argument.\n\n* `bfj.events.number`\n  indicates that\n  a number\n  has been encountered.\n  The listener\n  will be passed\n  the value\n  as its argument.\n\n* `bfj.events.literal`\n  indicates that\n  a JSON literal\n  (either `true`, `false` or `null`)\n  has been encountered.\n  The listener\n  will be passed\n  the value\n  as its argument.\n\n* `bfj.events.error`\n  indicates that\n  a syntax error\n  has occurred.\n  The listener\n  will be passed\n  the `Error` instance\n  as its argument.\n\n* `bfj.events.end`\n  indicates that\n  the end of the input\n  has been reached\n  and the stream is closed.\n\n#### Example\n\n```js\nvar emitter = bfj.walk(fs.createReadStream(path));\n\nemitter.on(bfj.events.array, array);\nemitter.on(bfj.events.object, object);\nemitter.on(bfj.events.property, property);\nemitter.on(bfj.events.string, value);\nemitter.on(bfj.events.number, value);\nemitter.on(bfj.events.literal, value);\nemitter.on(bfj.events.endArray, endScope);\nemitter.on(bfj.events.endObject, endScope);\nemitter.on(bfj.events.error, error);\nemitter.on(bfj.events.end, end);\n```\n\n### bfj.parse (stream, options)\n\n`parse` returns a [promise]\nand asynchronously parses\na stream of JSON data.\n\nIt takes two arguments;\na readable stream\nfrom which\nthe JSON\nwill be parsed\nand an options object\nthat supports\nthe following properties.\n\n* `options.reviver`:\n  Transformation function,\n  invoked depth-first\n  against the parsed\n  data structure.\n  This option\n  is analagous to the\n  [reviver parameter for JSON.parse][reviver].\n\n* `options.discard`:\n  The number of characters\n  to process before\n  discarding them\n  to save memory.\n  The default value\n  is `16384`.\n\nIf there are\nno syntax errors,\nthe returned promise is resolved\nwith the parsed data.\nIf syntax errors occur,\nthe promise is rejected\nwith the first error.\n\n#### Example\n\n```js\nbfj.parse(fs.createReadStream(path)).\n    then(function (data) {\n        // :)\n    }).\n    catch(function (error) {\n        // :(\n    });\n```\n\n### bfj.read (path, options)\n\n`read` returns a promise and\nasynchronously parses\na JSON file\nread from disk.\n\nIt takes two arguments;\nthe path to the JSON file\nand an options object\nthat supports\nthe following properties.\n\n* `options.reviver`:\n  Transformation function,\n  invoked depth-first\n  against the parsed\n  data structure.\n  This option\n  is analagous to the\n  [reviver parameter for JSON.parse][reviver].\n\n* `options.discard`:\n  The number of characters\n  to process before\n  discarding them\n  to save memory.\n  The default value\n  is `16384`.\n\nIf there are\nno syntax errors,\nthe returned promise is resolved\nwith the parsed data.\nIf syntax errors occur,\nthe promise is rejected\nwith the first error.\n\n#### Example\n\n```js\nbfj.read(path).\n    then(function (data) {\n        // :)\n    }).\n    catch(function (error) {\n        // :(\n    });\n```\n\n### bfj.eventify (data, options)\n\n`eventify` returns an event emitter\nand asynchronously traverses\na data structure depth-first,\nemitting events as it\nencounters items.\nBy default it coerces\npromises, buffers, dates and iterables\nto JSON-friendly values.\n\nIt takes two arguments;\nthe data structure to traverse\nand an options object\nthat supports\nthe following properties.\n\n* `options.promises`:\n  By default,\n  promises are coerced\n  to their resolved value.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore promises\n  in the data.\n\n* `options.buffers`:\n  By default,\n  buffers are coerced\n  using their `toString` method.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore buffers\n  in the data.\n\n* `options.dates`:\n  By default,\n  dates are coerced\n  using their `toJSON` method.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore dates\n  in the data.\n\n* `options.maps`:\n  By default,\n  maps are coerced\n  to plain objects.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore maps\n  in the data.\n\n* `options.iterables`:\n  By default,\n  other iterables\n  (i.e. not arrays, strings or maps)\n  are coerced\n  to arrays.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore other iterables\n  in the data.\n\n* `options.circular`:\n  By default,\n  circular references\n  will emit an error.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to silently skip past\n  circular references\n  in the data.\n\nThe emitted events\nare defined\nas public properties\nof an object,\n`bfj.events`:\n\n* `bfj.events.array`\n  indicates that\n  an array\n  has been encountered.\n\n* `bfj.events.endArray`\n  indicates that\n  the end of an array\n  has been encountered.\n\n* `bfj.events.object`\n  indicates that\n  an object\n  has been encountered.\n\n* `bfj.events.endObject`\n  indicates that\n  the end of an object\n  has been encountered.\n\n* `bfj.events.property`\n  indicates that\n  a property\n  has been encountered\n  in an object.\n  The listener\n  will be passed\n  the name of the property\n  as its argument\n  and the next event\n  to be emitted\n  will represent\n  the property's value.\n\n* `bfj.events.string`\n  indicates that\n  a string\n  has been encountered.\n  The listener\n  will be passed\n  the value\n  as its argument.\n\n* `bfj.events.number`\n  indicates that\n  a number\n  has been encountered.\n  The listener\n  will be passed\n  the value\n  as its argument.\n\n* `bfj.events.literal`\n  indicates that\n  a JSON literal\n  (either `true`, `false` or `null`)\n  has been encountered.\n  The listener\n  will be passed\n  the value\n  as its argument.\n\n* `bfj.events.error`\n  indicates that\n  a circular reference\n  was encountered\n  in the data.\n  The listener\n  will be passed\n  the `Error` instance\n  as its argument.\n\n* `bfj.events.end`\n  indicates that\n  the end of the data\n  has been reached and\n  no further events\n  will be emitted.\n\n#### Example\n\n```js\nvar emitter = bfj.eventify(data);\n\nemitter.on(bfj.events.array, array);\nemitter.on(bfj.events.object, object);\nemitter.on(bfj.events.property, property);\nemitter.on(bfj.events.string, string);\nemitter.on(bfj.events.number, value);\nemitter.on(bfj.events.literal, value);\nemitter.on(bfj.events.endArray, endArray);\nemitter.on(bfj.events.endObject, endObject);\nemitter.on(bfj.events.end, end);\n```\n\n### bfj.streamify (data, options)\n\n`streamify` returns a readable stream\nand asynchronously serialises\na data structure to JSON,\npushing the result\nto the returned stream.\n\nIt takes two arguments;\nthe data structure to serialise\nand an options object\nthat supports\nthe following properties.\n\n* `options.space`:\n  Indentation string\n  or the number of spaces\n  to indent\n  each nested level by.\n  This option\n  is analagous to the\n  [space parameter for JSON.stringify][space].\n\n* `options.promises`:\n  By default,\n  promises are coerced\n  to their resolved value.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore promises\n  in the data.\n\n* `options.buffers`:\n  By default,\n  buffers are coerced\n  using their `toString` method.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore buffers\n  in the data.\n\n* `options.dates`:\n  By default,\n  dates are coerced\n  using their `toJSON` method.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore dates\n  in the data.\n\n* `options.maps`:\n  By default,\n  maps are coerced\n  to plain objects.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore maps\n  in the data.\n\n* `options.iterables`:\n  By default,\n  other iterables\n  (i.e. not arrays, strings or maps)\n  are coerced\n  to arrays.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore other iterables\n  in the data.\n\n* `options.circular`:\n  By default,\n  circular references\n  will emit\n  a 'dataError' event\n  on the returned stream.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to silently skip past\n  circular references\n  in the data.\n\n#### Example\n\n```js\nvar stream = bfj.streamify(data);\n\nstream.on('data', read);\nstream.on('end', end);\nstream.on('dataError', error);\n```\n\n### bfj.stringify (data, options)\n\n`stringify` returns a promise and\nasynchronously serialises a data structure\nto a JSON string.\nThe promise is resolved\nto the JSON string\nwhen serialisation is complete.\n\nIt takes two arguments;\nthe data structure to serialise\nand an options object\nthat supports\nthe following properties.\n\n* `options.space`:\n  Indentation string\n  or the number of spaces\n  to indent\n  each nested level by.\n  This option\n  is analagous to the\n  [space parameter for JSON.stringify][space].\n\n* `options.promises`:\n  By default,\n  promises are coerced\n  to their resolved value.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore promises\n  in the data.\n\n* `options.buffers`:\n  By default,\n  buffers are coerced\n  using their `toString` method.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore buffers\n  in the data.\n\n* `options.dates`:\n  By default,\n  dates are coerced\n  using their `toJSON` method.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore dates\n  in the data.\n\n* `options.maps`:\n  By default,\n  maps are coerced\n  to plain objects.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore maps\n  in the data.\n\n* `options.iterables`:\n  By default,\n  other iterables\n  (i.e. not arrays, strings or maps)\n  are coerced\n  to arrays.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore other iterables\n  in the data.\n\n* `options.circular`:\n  By default,\n  circular references\n  will reject\n  the returned promise.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to silently skip past\n  circular references\n  in the data.\n\n#### Example\n\n```js\nbfj.stringify(data).\n    then(function (json) {\n        // :)\n    })\n    .catch(function (error) {\n        // :(\n    });\n```\n\n### bfj.write (path, data, options)\n\n`write` returns a promise\nand asynchronously serialises a data structure\nto a JSON file on disk.\nThe promise is resolved\nwhen the file has been written,\nor rejected with the error\nif writing failed.\n\nIt takes three arguments;\nthe path to the JSON file,\nthe data structure to serialise\nand an options object\nthat supports\nthe following properties.\n\n* `options.space`:\n  Indentation string\n  or the number of spaces\n  to indent\n  each nested level by.\n  This option\n  is analagous to the\n  [space parameter for JSON.stringify][space].\n\n* `options.promises`:\n  By default,\n  promises are coerced\n  to their resolved value.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore promises\n  in the data.\n\n* `options.buffers`:\n  By default,\n  buffers are coerced\n  using their `toString` method.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore buffers\n  in the data.\n\n* `options.dates`:\n  By default,\n  dates are coerced\n  using their `toJSON` method.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore dates\n  in the data.\n\n* `options.maps`:\n  By default,\n  maps are coerced\n  to plain objects.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore maps\n  in the data.\n\n* `options.iterables`:\n  By default,\n  other iterables\n  (i.e. not arrays, strings or maps)\n  are coerced\n  to arrays.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to ignore other iterables\n  in the data.\n\n* `options.circular`:\n  By default,\n  circular references\n  will cause the write\n  to fail.\n  Set this property\n  to `'ignore'`\n  if you'd prefer\n  to silently skip past\n  circular references\n  in the data.\n\n#### Example\n\n```js\nbfj.write(path, data).\n    then(function () {\n        // :)\n    }).\n    catch(function (error) {\n        // :(\n    });\n```\n\n## Is there a change log?\n\n[Yes][history].\n\n## How do I set up the dev environment?\n\nThe development environment\nrelies on node.js,\n[JSHint],\n[Mocha],\n[Chai],\n[Mockery] and\n[Spooks].\nAssuming that\nyou already have\nnode and NPM\nset up,\nyou just need\nto run\n`npm install`\nto install\nall of the dependencies\nas listed in `package.json`.\n\nYou can\nlint the code\nwith the command\n`npm run lint`.\n\nYou can\nrun the tests\nwith the command\n`npm test`.\n\n## What versions of node.js does it support?\n\n0.12 and the latest stable io.js.\n\n## What license is it released under?\n\n[MIT][license].\n\n[ci-image]: https://secure.travis-ci.org/philbooth/bfj.png?branch=master\n[ci-status]: http://travis-ci.org/#!/philbooth/bfj\n[sax]: http://en.wikipedia.org/wiki/Simple_API_for_XML\n[eventemitter]: https://nodejs.org/api/events.html#events_class_events_eventemitter\n[readable]: https://nodejs.org/api/stream.html#stream_class_stream_readable\n[promise]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n[reviver]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example:_Using_the_reviver_parameter\n[space]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#space_argument\n[history]: HISTORY.md\n[jshint]: https://github.com/jshint/node-jshint\n[mocha]: https://github.com/mochajs/mocha\n[chai]: https://github.com/chaijs\n[mockery]: https://github.com/mfncooper/mockery\n[spooks]: https://github.com/philbooth/spooks.js\n[license]: COPYING\n\n",
  "readmeFilename": "README.md",
  "_id": "bfj@1.2.2",
  "_from": "bfj@~1.2"
}
